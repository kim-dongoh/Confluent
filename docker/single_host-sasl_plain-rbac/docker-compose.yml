---
version: "2.3"
services:
  zookeeper1:
    # docker hub의 zookeeper 경로:버전
    image: confluentinc/cp-zookeeper:7.1.0
    restart: always
    # Container 내부에서 사용할 hostname
    hostname: zookeeper1
    container_name: zookeeper1
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_MAX_CLIENT_CNXNS: 60
      # 모든 클라이언트들이 SASL 인증을 하도록 설정 
      ZOOKEEPER_SASL_CLIENT: true
      #ZOOKEEPER_AUTH_PROVIDER_X509: org.apache.zookeeper.server.auth.X509AuthenticationProvider
      # 인증되지 않은 사용자의 연결은 유지하지만, 조작은 할 수 없음
      ZOOKEEPER_AUTH_PROVIDER_SASL: org.apache.zookeeper.server.auth.SASLAuthenticationProvider
      KAFKA_OPTS: -Djava.security.auth.login.config=/etc/kafka/secrets/zookeeper_jaas.conf
    volumes:
      - ./security:/etc/kafka/secrets
  
  kafka1:
    image: confluentinc/cp-server:7.1.0
    hostname: kafka1
    container_name: kafka1
    depends_on:
      - zookeeper1
    volumes:
    # Host 디렉토리:컨테이너 디렉토리
    # /home/ubuntu/cp-demo/scripts/security 를 /etc/kafka/secrets 폴더에 마운트 시켜줘야 SASL 사용 가능
    # /home/ubuntu/cp-demo/scripts/security 안에 zookeeper_jass.conf 파일도 있음
      - ./security/keypair:/tmp/conf
      - ./helper:/tmp/helper
      - ./security:/etc/kafka/secrets
    ports:
      # MDS
      - 8091:8091
      # SASL_PLAINTEXT
      - 9091:9091
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181
      KAFKA_ZOOKEEPER_SET_ACL: 'true'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:SASL_PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9091
      
      KAFKA_SUPER_USERS: User:admin;User:mds;User:superUser;User:ANONYMOUS
      KAFKA_LOG4J_LOGGERS: "kafka.authorizer.logger=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO

      KAFKA_BROKER_ID: 1
      #KAFKA_BROKER_RACK: "r1"
      KAFKA_JMX_PORT: 9991

      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN

      #KAFKA_LISTENER_NAME_INTERNAL_SASL_ENABLED_MECHANISMS: PLAIN
      #KAFKA_LISTENER_NAME_INTERNAL_PLAIN_SASL_JAAS_CONFIG: |
      #        org.apache.kafka.common.security.plain.PlainLoginModule required \
      #        username="admin" \
      #        password="admin-secret" \
      #        user_admin="admin-secret" \
      #        user_mds="mds-secret";
      
      KAFKA_OPTS: -Djava.security.auth.login.config=/etc/kafka/secrets/broker_jaas.conf

      # Confluent Metrics Reporter
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 2
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka1:9091,kafka2:9092
      CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: SASL_PLAINTEXT
      CONFLUENT_METRICS_REPORTER_SASL_JAAS_CONFIG: |
        \
        org.apache.kafka.common.security.plain.PlainLoginModule required \
        username="admin" \
        password="admin-secret";
      CONFLUENT_METRICS_REPORTER_SASL_MECHANISM: PLAIN
      CONFLUENT_METRICS_REPORTER_MAX_REQUEST_SIZE: 10485760
      # To avoid race condition with control-center
      # CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: 'false'
      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: 'true'

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_EXPORTER_KAFKA_TOPIC_REPLICAS: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_CONFLUENT_BALANCER_HEAL_BROKER_FAILURE_THRESHOLD_MS: 30000

      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
  kafka2:
    image: confluentinc/cp-server:7.1.0
    hostname: kafka2
    container_name: kafka2
    depends_on:
      - zookeeper1
    volumes:
    # Host 디렉토리:컨테이너 디렉토리
    # /home/ubuntu/cp-demo/scripts/security 를 /etc/kafka/secrets 폴더에 마운트 시켜줘야 SASL 사용 가능
    # /home/ubuntu/cp-demo/scripts/security 안에 zookeeper_jass.conf 파일도 있음
      - ./security/keypair:/tmp/conf
      - ./helper:/tmp/helper
      - ./security:/etc/kafka/secrets
    ports:
      # MDS
      - 8092:8092
      # SASL_PLAINTEXT
      - 9092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181
      KAFKA_ZOOKEEPER_SET_ACL: 'true'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:SASL_PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9092

      KAFKA_SUPER_USERS: User:admin;User:mds;User:superUser;User:ANONYMOUS
      KAFKA_LOG4J_LOGGERS: "kafka.authorizer.logger=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO

      KAFKA_BROKER_ID: 2
      #KAFKA_BROKER_RACK: "r1"
      KAFKA_JMX_PORT: 9991

      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN

      #KAFKA_LISTENER_NAME_INTERNAL_SASL_ENABLED_MECHANISMS: PLAIN
      #KAFKA_LISTENER_NAME_INTERNAL_PLAIN_SASL_JAAS_CONFIG: |
      #        org.apache.kafka.common.security.plain.PlainLoginModule required \
      #        username="admin" \
      #        password="admin-secret" \
      #        user_admin="admin-secret" \
      #        user_mds="mds-secret";

      KAFKA_OPTS: -Djava.security.auth.login.config=/etc/kafka/secrets/broker_jaas.conf
      
      # Confluent Metrics Reporter
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 2
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka1:9091,kafka2:9092
      CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: SASL_PLAINTEXT
      CONFLUENT_METRICS_REPORTER_SASL_JAAS_CONFIG: |
        \
        org.apache.kafka.common.security.plain.PlainLoginModule required \
        username="admin" \
        password="admin-secret";
      CONFLUENT_METRICS_REPORTER_SASL_MECHANISM: PLAIN
      CONFLUENT_METRICS_REPORTER_MAX_REQUEST_SIZE: 10485760
      # To avoid race condition with control-center
      # CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: 'false'
      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: 'true'

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_EXPORTER_KAFKA_TOPIC_REPLICAS: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_CONFLUENT_BALANCER_HEAL_BROKER_FAILURE_THRESHOLD_MS: 30000

      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.1.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka1
      - kafka2
    volumes:
      - ./security/keypair:/tmp/conf
      - ./security:/etc/kafka/secrets
    ports:
      - 9021:9021
      - 9022:9022
    environment:
      CUB_CLASSPATH: '/usr/share/java/confluent-control-center/*:/usr/share/java/rest-utils/*:/usr/share/java/confluent-common/*:/usr/share/java/confluent-security/kafka-rest/*:/usr/share/java/kafka-rest/:/usr/share/java/cp-base-new/*'

      # general settings
      CONTROL_CENTER_BOOTSTRAP_SERVERS: SASL_PLAINTEXT://kafka1:9091,SASL_PLAINTEXT://kafka2:9092
      CONTROL_CENTER_STREAMS_SECURITY_PROTOCOL: SASL_PLAINTEXT
      CONTROL_CENTER_STREAMS_SASL_MECHANISM: PLAIN
      #CONTROL_CENTER_STREAMS_SASL_LOGIN_CALLBACK_HANDLER_CLASS: io.confluent.kafka.clients.plugins.auth.token.TokenUserLoginCallbackHandler
      CONTROL_CENTER_STREAMS_SASL_JAAS_CONFIG: |
              org.apache.kafka.common.security.plain.PlainLoginModule required \
              username="admin" \
              password="admin-secret" \
              metadataServerUrls="https://kafka1:8091,https://kafka2:8092";

      CONTROL_CENTER_REPLICATION_FACTOR: 2
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 2
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_METRICS_TOPIC_REPLICATION: 2
      CONTROL_CENTER_METRICS_TOPIC_PARTITIONS: 1

      # Amount of heap to use for internal caches. Increase for better throughput
      CONTROL_CENTER_STREAMS_CACHE_MAX_BYTES_BUFFERING: 100000000
      CONTROL_CENTER_STREAMS_CONSUMER_REQUEST_TIMEOUT_MS: "960032"
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1

      PORT: 9021
