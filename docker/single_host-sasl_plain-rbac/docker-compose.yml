---
version: "2.3"
services:
  tools:
    image: localbuild/tools:7.1.1
    hostname: tools
    container_name: tools
    build:
      context: .
      dockerfile: tools/Dockerfile
    volumes:
      - ./scripts/helper:/tmp/helper
      - ./scripts/security:/etc/kafka/secrets
    entrypoint: /bin/bash
    tty: true
    environment:
      TZ: America/New_York
      KAFKA_CLUSTER_ID: "${KAFKA_CLUSTER_ID}"
  
  zookeeper1:
    # docker hub의 zookeeper 경로:버전
    image: confluentinc/cp-zookeeper:7.1.0
    restart: always
    # Container 내부에서 사용할 hostname
    hostname: zookeeper1
    container_name: zookeeper1
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_MAX_CLIENT_CNXNS: 60
      # 모든 클라이언트들이 SASL 인증을 하도록 설정 
      ZOOKEEPER_SASL_CLIENT: true
      #ZOOKEEPER_AUTH_PROVIDER_X509: org.apache.zookeeper.server.auth.X509AuthenticationProvider
      # 인증되지 않은 사용자의 연결은 유지하지만, 조작은 할 수 없음
      ZOOKEEPER_AUTH_PROVIDER_SASL: org.apache.zookeeper.server.auth.SASLAuthenticationProvider
      KAFKA_OPTS: -Djava.security.auth.login.config=/etc/kafka/secrets/zookeeper_jaas.conf
    volumes:
      - ./scripts/security:/etc/kafka/secrets
  
  kafka1:
    image: confluentinc/cp-server:7.1.0
    hostname: kafka1
    container_name: kafka1
    healthcheck:
      test: curl --user superUser:superUser -fail --silent --insecure http://kafka1:8091/kafka/v3/clusters/ --output /dev/null || exit 1
      interval: 10s
      retries: 25
      start_period: 20s
    depends_on:
      - zookeeper1
    volumes:
    # Host 디렉토리:컨테이너 디렉토리
    # /home/ubuntu/cp-demo/scripts/security 를 /etc/kafka/secrets 폴더에 마운트 시켜줘야 SASL 사용 가능
    # /home/ubuntu/cp-demo/scripts/security 안에 zookeeper_jass.conf 파일도 있음
      - ./scripts/security/keypair:/tmp/conf
      - ./scripts/helper:/tmp/helper
      - ./scripts/security:/etc/kafka/secrets
    ports:
      # MDS
      - 8091:8091
      # SASL_PLAINTEXT
      - 9091:9091
      # SASL_OAUTHBEARER
      - 10091:10091
    environment:
      KAFKA_SUPER_USERS: User:admin;User:mds;User:superUser;User:ANONYMOUS
      KAFKA_LOG4J_LOGGERS: "kafka.authorizer.logger=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      
      KAFKA_BROKER_ID: 1
      KAFKA_JMX_PORT: 9991
    
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181
      KAFKA_ZOOKEEPER_SET_ACL: 'true'
      
      KAFKA_OPTS: -Djava.security.auth.login.config=/etc/kafka/secrets/broker_jaas.conf
      
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:SASL_PLAINTEXT,EXTERNAL:SASL_PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9091,EXTERNAL://kafka1:10091
      KAFKA_CONFLUENT_METADATA_SECURITY_PROTOCAL: SASL_PLAINTEXT
      
      # Interbroker listener
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN, OAUTHBEARER
      KAFKA_LISTENER_NAME_INTERNAL_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_LISTENER_NAME_INTERNAL_PLAIN_SASL_JAAS_CONFIG: |
              org.apache.kafka.common.security.plain.PlainLoginModule required \
              username="admin" \
              password="admin-secret" \
              user_admin="admin-secret" \
              user_mds="mds-secret";
      
      # External listener
      KAFKA_LISTENER_NAME_EXTERNAL_SASL_ENABLED_MECHANISMS: OAUTHBEARER
      KAFKA_LISTENER_NAME_EXTERNAL_OAUTHBEARER_SASL_SERVER_CALLBACK_HANDLER_CLASS: io.confluent.kafka.server.plugins.auth.token.TokenBearerValidatorCallbackHandler
      KAFKA_LISTENER_NAME_EXTERNAL_OAUTHBEARER_SASL_LOGIN_CALLBACK_HANDLER_CLASS: io.confluent.kafka.server.plugins.auth.token.TokenBearerServerLoginCallbackHandler
      KAFKA_LISTENER_NAME_EXTERNAL_OAUTHBEARER_SASL_JAAS_CONFIG: |
              org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
              publicKeyPath="/tmp/conf/public.pem";
     

      # CONFIGURE AUTHORIZER
      # Setup kafka to use RBAC authorizer
      KAFKA_AUTHORIZER_CLASS_NAME: io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
      KAFKA_CONFLUENT_AUTHORIZER_ACCESS_RULE_PROVIDERS: CONFLUENT,ZK_ACL
      KAFKA_CONFLUENT_AUTHORIZER_GROUP_PROVIDERS: RBAC

      # ======================== CONFIGURE MDS ====================================
      # Configure how MDS talks to broker
      #KAFKA_CONFLUENT_METADATA_BOOTSTRAP_SERVERS: INTERNAL://kafka1:9091
      KAFKA_CONFLUENT_METADATA_SASL_MECHANISM: PLAIN
      KAFKA_CONFLUENT_METADATA_SASL_JAAS_CONFIG: |
        \
        org.apache.kafka.common.security.plain.PlainLoginModule required \
        username="mds" \
        password="mds-secret";
      
      KAFKA_CONFLUENT_METADATA_TOPIC_REPLICATION_FACTOR: 2

      # Configure MDS listener and http server
      KAFKA_CONFLUENT_METADATA_SERVER_AUTHENTICATION_METHOD: BEARER
      KAFKA_CONFLUENT_METADATA_SERVEr_AUTHENTICATION_ROLES: '**'
      KAFKA_CONFLUENT_METADATA_SERVER_LISTENERS: http://0.0.0.0:8091
      KAFKA_CONFLUENT_METADATA_SERVER_ADVERTISED_LISTENERS: http://kafka1:8091
      KAFKA_CONFLUENT_METADATA_SERVER_OPENAPI_ENABLE: true

      # Configure RBAC token server (authentication)
      KAFKA_CONFLUENT_METADATA_SERVER_TOKEN_AUTH_ENABLE: 'true'
      KAFKA_CONFLUENT_METADATA_SERVER_TOKEN_MAX_LIFETIME_MS: 3600000
      KAFKA_CONFLUENT_METADATA_SERVER_TOKEN_SIGNATURE_ALGORITHM: RS256
      KAFKA_CONFLUENT_METADATA_SERVER_TOKEN_KEY_PATH: /tmp/conf/keypair.pem
      KAFKA_CONFLUENT_METADATA_SERVER_PUBLIC_KEY_PATH: /tmp/conf/public.pem

      # Configure MDS to talk to AD / LDAP
      KAFKA_LDAP_JAVA_NAMING_FACTORY_INITIAL: com.sun.jndi.ldap.LdapCtxFactory
      KAFKA_LDAP_COM_SUN_JNDI_LDAP_READ_TIMEOUT: 3000
      KAFKA_LDAP_JAVA_NAMING_PROVIDER_URL: ldap://222.117.240.138:11389

      # Authenticate to LDAP
      KAFKA_LDAP_JAVA_NAMING_SECURITY_PRINCIPAL: cn=admin,dc=confluent,dc=io
      KAFKA_LDAP_JAVA_NAMING_SECURITY_CREDENTIALS: admin
      KAFKA_LDAP_JAVA_NAMING_SECURITY_AUTHENTICATION: simple

      # Locate LDAP users and groups
      KAFKA_LDAP_USER_SEARCH_BASE: ou=users,dc=confluent,dc=io
      KAFKA_LDAP_USER_NAME_ATTRIBUTE: uid
      KAFKA_LDAP_USER_OBJECT_CLASS: inetOrgPerson
      KAFKA_LDAP_GROUP_SEARCH_BASE: ou=groups,dc=confluent,dc=io
      KAFKA_LDAP_GROUP_NAME_ATTRIBUTE: cn
      KAFKA_LDAP_GROUP_OBJECT_CLASS: posixGroup


      # ======================== CONFIGURE METRICS REPORTER =======================
      # Confluent Metrics Reporter
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 2
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka1:9091,kafka2:9092
      CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: SASL_PLAINTEXT
      CONFLUENT_METRICS_REPORTER_SASL_MECHANISM: PLAIN
      CONFLUENT_METRICS_REPORTER_SASL_JAAS_CONFIG: |
        \
        org.apache.kafka.common.security.plain.PlainLoginModule required \
        username="admin" \
        password="admin-secret";
      
      CONFLUENT_METRICS_REPORTER_MAX_REQUEST_SIZE: 10485760
      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: 'true'

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_EXPORTER_KAFKA_TOPIC_REPLICAS: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_CONFLUENT_BALANCER_HEAL_BROKER_FAILURE_THRESHOLD_MS: 30000

      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2

  kafka2:
    image: confluentinc/cp-server:7.1.0
    hostname: kafka2
    container_name: kafka2
    healthcheck:
      test: curl --user superUser:superUser -fail --silent --insecure http://kafka2:8092/kafka/v3/clusters/ --output /dev/null || exit 1
      interval: 10s
      retries: 25
      start_period: 20s
    depends_on:
      - zookeeper1
    volumes:
    # Host 디렉토리:컨테이너 디렉토리
    # /home/ubuntu/cp-demo/scripts/security 를 /etc/kafka/secrets 폴더에 마운트 시켜줘야 SASL 사용 가능
    # /home/ubuntu/cp-demo/scripts/security 안에 zookeeper_jass.conf 파일도 있음
      - ./scripts/security/keypair:/tmp/conf
      - ./scripts/helper:/tmp/helper
      - ./scripts/security:/etc/kafka/secrets
    ports:
      # MDS
      - 8092:8092
      # SASL_PLAINTEXT
      - 9092:9092
      # SASL_OAUTHBEARER
      - 10092:10092
    environment:
      KAFKA_SUPER_USERS: User:admin;User:mds;User:superUser;User:ANONYMOUS
      KAFKA_LOG4J_LOGGERS: "kafka.authorizer.logger=INFO"
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      
      KAFKA_BROKER_ID: 2
      KAFKA_JMX_PORT: 9992
      
      KAFKA_ZOOKEEPER_CONNECT: zookeeper1:2181
      KAFKA_ZOOKEEPER_SET_ACL: 'true'
      
      KAFKA_OPTS: -Djava.security.auth.login.config=/etc/kafka/secrets/broker_jaas.conf
      
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:SASL_PLAINTEXT,EXTERNAL:SASL_PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9092,EXTERNAL://kafka2:10092
      KAFKA_CONFLUENT_METADATA_SECURITY_PROTOCAL: SASL_PLAINTEXT

      # Interbroker listener
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN, OAUTHBEARER
      KAFKA_LISTENER_NAME_INTERNAL_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_LISTENER_NAME_INTERNAL_PLAIN_SASL_JAAS_CONFIG: |
              org.apache.kafka.common.security.plain.PlainLoginModule required \
              username="admin" \
              password="admin-secret" \
              user_admin="admin-secret" \
              user_mds="mds-secret";
      
      # External listener
      KAFKA_LISTENER_NAME_EXTERNAL_SASL_ENABLED_MECHANISMS: OAUTHBEARER
      KAFKA_LISTENER_NAME_EXTERNAL_OAUTHBEARER_SASL_SERVER_CALLBACK_HANDLER_CLASS: io.confluent.kafka.server.plugins.auth.token.TokenBearerValidatorCallbackHandler
      KAFKA_LISTENER_NAME_EXTERNAL_OAUTHBEARER_SASL_LOGIN_CALLBACK_HANDLER_CLASS: io.confluent.kafka.server.plugins.auth.token.TokenBearerServerLoginCallbackHandler
      KAFKA_LISTENER_NAME_EXTERNAL_OAUTHBEARER_SASL_JAAS_CONFIG: |
              org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
              publicKeyPath="/tmp/conf/public.pem";


      # CONFIGURE AUTHORIZER
      # Setup kafka to user RBAC authorizer
      KAFKA_AUTHORIZER_CLASS_NAME: io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
      KAFKA_CONFLUENT_AUTHORIZER_ACCESS_RULE_PROVIDERS: CONFLUENT,ZK_ACL
      KAFKA_CONFLUENT_AUTHORIZER_GROUP_PROVIDERS: RBAC

      # ======================== CONFIGURE MDS ====================================
      # Configure how MDS talks to broker
      #KAFKA_CONFLUENT_METADATA_BOOTSTRAP_SERVERS: INTERNAL://kafka2:9092
      KAFKA_CONFLUENT_METADATA_SASL_MECHANISM: PLAIN
      KAFKA_CONFLUENT_METADATA_SASL_JAAS_CONFIG: |
        \
        org.apache.kafka.common.security.plain.PlainLoginModule required \
        username="mds" \
        password="mds-secret";
      
      KAFKA_CONFLUENT_METADATA_TOPIC_REPLICATION_FACTOR: 2

      # Configure MDS listener and http server
      KAFKA_CONFLUENT_METADATA_SERVER_AUTHENTICATION_METHOD: BEARER
      KAFKA_CONFLUENT_METADATA_SERVEr_AUTHENTICATION_ROLES: '**'
      KAFKA_CONFLUENT_METADATA_SERVER_LISTENERS: http://0.0.0.0:8092
      KAFKA_CONFLUENT_METADATA_SERVER_ADVERTISED_LISTENERS: http://kafka2:8092
      KAFKA_CONFLUENT_METADATA_SERVER_OPENAPI_ENABLE: true

      # Configure RBAC token server (authentication)
      KAFKA_CONFLUENT_METADATA_SERVER_TOKEN_AUTH_ENABLE: true
      KAFKA_CONFLUENT_METADATA_SERVER_TOKEN_MAX_LIFETIME_MS: 3600000
      KAFKA_CONFLUENT_METADATA_SERVER_TOKEN_SIGNATURE_ALGORITHM: RS256
      KAFKA_CONFLUENT_METADATA_SERVER_TOKEN_KEY_PATH: /tmp/conf/keypair.pem
      KAFKA_CONFLUENT_METADATA_SERVER_PUBLIC_KEY_PATH: /tmp/conf/public.pem
      
      # Configure MDS to talk to AD / LDAP
      KAFKA_LDAP_JAVA_NAMING_FACTORY_INITIAL: com.sun.jndi.ldap.LdapCtxFactory
      KAFKA_LDAP_COM_SUN_JNDI_LDAP_READ_TIMEOUT: 3000
      KAFKA_LDAP_JAVA_NAMING_PROVIDER_URL: ldap://222.117.240.138:11389

      # Authenticate to LDAP
      KAFKA_LDAP_JAVA_NAMING_SECURITY_PRINCIPAL: cn=admin,dc=confluent,dc=io
      KAFKA_LDAP_JAVA_NAMING_SECURITY_CREDENTIALS: admin
      KAFKA_LDAP_JAVA_NAMING_SECURITY_AUTHENTICATION: simple

      # Locate LDAP users and groups
      KAFKA_LDAP_USER_SEARCH_BASE: ou=users,dc=confluent,dc=io
      KAFKA_LDAP_USER_NAME_ATTRIBUTE: uid
      KAFKA_LDAP_USER_OBJECT_CLASS: inetOrgPerson
      KAFKA_LDAP_GROUP_SEARCH_BASE: ou=groups,dc=confluent,dc=io
      KAFKA_LDAP_GROUP_NAME_ATTRIBUTE: cn
      KAFKA_LDAP_GROUP_OBJECT_CLASS: posixGroup


      # ======================== CONFIGURE METRICS REPORTER =======================
      # Confluent Metrics Reporter
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 2
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka1:9091,kafka2:9092
      CONFLUENT_METRICS_REPORTER_SECURITY_PROTOCOL: SASL_PLAINTEXT
      CONFLUENT_METRICS_REPORTER_SASL_MECHANISM: PLAIN
      CONFLUENT_METRICS_REPORTER_SASL_JAAS_CONFIG: |
        \
        org.apache.kafka.common.security.plain.PlainLoginModule required \
        username="admin" \
        password="admin-secret";
      CONFLUENT_METRICS_REPORTER_MAX_REQUEST_SIZE: 10485760
      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: 'true'

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_EXPORTER_KAFKA_TOPIC_REPLICAS: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_CONFLUENT_BALANCER_HEAL_BROKER_FAILURE_THRESHOLD_MS: 30000

      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DEFAULT_REPLICATION_FACTOR: 2
  
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.1.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka1
      - kafka2
    volumes:
      - ./scripts/security/keypair:/tmp/conf
      - ./scripts/security:/etc/kafka/secrets
    ports:
      - 9021:9021
      - 9022:9022
    environment:
      CUB_CLASSPATH: '/usr/share/java/confluent-control-center/*:/usr/share/java/rest-utils/*:/usr/share/java/confluent-common/*:/usr/share/java/confluent-security/kafka-rest/*:/usr/share/java/kafka-rest/:/usr/share/java/cp-base-new/*'

      # general settings
      PORT: 9021
      CONTROL_CENTER_BOOTSTRAP_SERVERS: SASL_PLAINTEXT://kafka1:9091,SASL_PLAINTEXT://kafka2:9092
      CONTROL_CENTER_REPLICATION_FACTOR: 2
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 2
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_METRICS_TOPIC_REPLICATION: 2
      CONTROL_CENTER_METRICS_TOPIC_PARTITIONS: 1

      # Amount of heap to use for internal caches. Increase for better throughput
      CONTROL_CENTER_STREAMS_CACHE_MAX_BYTES_BUFFERING: 100000000
      CONTROL_CENTER_STREAMS_CONSUMER_REQUEST_TIMEOUT_MS: "960032"
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1


      # ============================= RBAC ============================
      CONTROL_CENTER_STREAMS_SECURITY_PROTOCOL: SASL_PLAINTEXT
      CONTROL_CENTER_STREAMS_SASL_MECHANISM: OAUTHBEARER
      CONTROL_CENTER_STREAMS_SASL_LOGIN_CALLBACK_HANDLER_CLASS: io.confluent.kafka.clients.plugins.auth.token.TokenUserLoginCallbackHandler
      CONTROL_CENTER_STREAMS_SASL_JAAS_CONFIG: |
              org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
              username="controlcenterAdmin" \
              password="controlcenterAdmin" \
              metadataServerUrls="http://kafka1:8091,http://kafka2:8092";

      CONTROL_CENTER_REST_AUTHENTICATION_METHOD: BEARER
      PUBLIC_KEY_PATH: /tmp/conf/public.pem

      CONFLUENT_METADATA_BOOTSTRAP_SERVER_URLS: http://kafka1:8091,http://kafka2:8092
      CONFLUENT_METADATA_BASIC_AUTH_USER_INFO: controlcenterAdmin:controlcenterAdmin
